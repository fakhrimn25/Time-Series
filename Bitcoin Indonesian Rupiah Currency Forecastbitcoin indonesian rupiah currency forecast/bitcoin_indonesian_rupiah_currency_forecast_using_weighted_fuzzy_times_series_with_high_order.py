# -*- coding: utf-8 -*-
"""Bitcoin Indonesian Rupiah Currency Forecast using Weighted Fuzzy Times Series with High Order

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LWqYoCqpKdHrKKFSOvyu8qk8v0h9ohER
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from sklearn.model_selection import train_test_split
import numpy as np
import math

#Membaca file
df = pd.read_excel('/content/data terbaru coba.. (1).xlsx')
df.head()

def ad_test(dataset):
     dftest = adfuller(dataset, autolag = 'AIC')
     print("1. ADF : ",dftest[0])
     print("2. P-Value : ", dftest[1])
     print("3. Num Of Lags : ", dftest[2])
     print("4. Num Of Observations Used For ADF Regression:", dftest[3])
     print("5. Critical Values :")
     for key, val in dftest[4].items():
         print("\t",key, ": ", val)

def plot(data):
  data.plot()
  plt.title('Plot Data')
  plt.xlabel('Days')
  plt.tight_layout()
  plt.show()

#Uji Stasioneritas Data
data_pakai = df['bitcoin']

#Plot Data
plot(df)

stasioner = ad_test(data_pakai)
dftest = adfuller(data_pakai, autolag = 'AIC')
if dftest[1] > 0.05:
  diff = data_pakai.diff()
  plot(diff)
  ad_test(diff[1:])

x_train_asli, x_test_asli = train_test_split(data_pakai,
                                             test_size=0.1,
                                             random_state=None,
                                             shuffle=False)
x_test_asli = x_test_asli.reset_index(drop=True)

x_train, x_test = train_test_split(diff,
                                   test_size=0.1,
                                   random_state=None,
                                   shuffle=False)

#Menampilkan Data
x_train = x_train.dropna().reset_index(drop=True)
x_test = x_test.reset_index(drop=True)
data_training_test = pd.concat([x_train,x_test], axis=1).reset_index(drop=True)
data_training_test.columns = ['data training', 'data testing']
pd.set_option('max_row', None)
display(data_training_test[:len(x_test)])
print('='*100)
print('Banyak Data Train :',len(x_train))
print('='*100)
print('Banyak Data Train :',len(x_test))

absolut = []
for i in range (len(x_train)-1):
  absolut1 = abs(x_train[i+1]-x_train[i])
  absolut.append(absolut1)

rata2_data1=np.mean(absolut)
setengah_rata2_data1=rata2_data1*0.5
max_data1 = x_train.max()
min_data1 = x_train.min()
print('='*100)
print('Rata - rata :',rata2_data1)
print('='*100)
print('Setengah Rata-rata : ',setengah_rata2_data1)
print('='*100)
print('Nilai Max :',max_data1)
print('='*100)
print('Nilai Min :',min_data1)

#Pembulatan
def pembulatan(x):
  if x >= 0.1 and x <= 1.0:
    f = round(x,1)
    return f
  elif x >= 1.1 and x <= 10:
    f = round(x)
    return f
  elif x >= 10.1 and x <= 100:
    f = x / 10
    f = round(f)*10
    return f
  elif x >= 100.1 and x <= 1000:
    f = x / 100
    f = round(f)*100
    return f
  elif x >= 1000.1 and x <= 10000:
    f = x / 1000
    f = round(f)*1000
    return f
  elif x >= 10000.1 and x <= 100000:
    f = x / 10000
    f = round(f)*10000
    return f
  elif x >= 100000.1 and x <= 1000000:
    f = x / 100000
    f = round(f)*100000
    return f
  elif x >= 1000000.1 and x <= 10000000:
    f = x / 1000000
    f = round(f)*1000000
    return f
  elif x >= 10000000.1 and x <= 100000000:
    f = x / 10000000
    f = round(f)*10000000
    return f
  elif x >= 100000000.1 and x <= 1000000000:
    f = x / 100000000
    f = round(f)*100000000
    return f
  elif x >= 1000000000.1 and x <= 10000000000:
    f = x / 1000000000
    f = round(f)*1000000000
    return f

n = pembulatan(setengah_rata2_data1)
print('panjang interval : ',n)
print('='*100)

#Menentukan banyak interval
s = (max_data1 - min_data1) / n
banyak_interval = math.ceil(s)
print('Banyaknya interval: ',banyak_interval)
print('='*100)
print('Interval :')
u=[[math.floor(min_data1+i*n),math.floor(min_data1+(i+1)*n)] for i in range(banyak_interval)]
for i in range(banyak_interval):
  print(f'u{i+1} : {u[i]}')
print('='*100)

#Untuk menentukan nilai tengah dari interval
nilai_tengah = [(math.floor(min_data1+i*n)+math.floor(min_data1+(i+1)*n))/2 for i in range(banyak_interval)]
print('Nilai Tengah: ')
for i in range(banyak_interval):
  print(f'm{i+1} : {nilai_tengah[i]}')
print('='*100)

#Fuzifikasi
def Fuzifikasi(data):
  Fuzi =[]
  NT = []
  for i in range (len(data)):
    for j in range(banyak_interval):
      if u[j][0] <= data[i] <= u[j][1]:
        Fuzi.append(f'A{j+1}')
        NT.append(nilai_tengah[j])
  Fuzifi = pd.DataFrame(Fuzi, columns=['Fuzifikasi'])
  Nilai_T = pd.DataFrame(NT, columns=['Nilai Tengah'])
  dataFuzi = pd.concat([data, Fuzifi, Nilai_T], axis=1)
  return dataFuzi

datafuzifikasi = Fuzifikasi(x_train)
display(datafuzifikasi)

#FLR

def nextstage(data):
  global next, curent, nt_flrg
  next = [np.NaN,np.NaN]
  list_next = [np.NaN,np.NaN]
  curent = [np.NaN,np.NaN]
  for i in range(len(data)-2):
    x = data.values[i:i+2]
    y = data.values[i+2]
    list_next.append(f'{x} -> {[y]}')
    next.append(f'{x[0]},{x[1]}')
    curent.append(y)
  return list_next

def NT(data):
  nt = [np.NaN,np.NaN]
  for i in range(len(data)-2):
    x = data.values[i+2]
    nt.append(x)
  return nt

list3_series = pd.DataFrame(nextstage(datafuzifikasi['Fuzifikasi']), columns=['Next Stage'])
list4_series = pd.DataFrame(curent, columns=['Nilai'])
list5_series = pd.DataFrame(next, columns=['Next'])
listnt_series = pd.DataFrame(NT(datafuzifikasi['Nilai Tengah']), columns=['Nilai Tengah'])
df_FLR = pd.concat([datafuzifikasi['Fuzifikasi'], list3_series], axis=1)
df_flr = pd.concat([datafuzifikasi['Fuzifikasi'], list5_series, list4_series, listnt_series], axis=1)
next1 = list5_series.dropna()
next2 = next1.drop_duplicates().reset_index(drop=True)
print('FLR :')
display(df_FLR)
print('='*100)

#FLRG

df_flr = df_flr.dropna().reset_index(drop=True)
flrg = []
for i in next2.values:
  x = df_flr.Nilai[df_flr.Next == i[0]].values
  flrg.append([x])
list6_series = pd.DataFrame(flrg, columns=['NSFLRG'])
df_flrg = pd.concat([next2, list6_series], axis=1)
display(df_flrg)

#Defuzzifikasi

flrgnt = []
for i in next2.values:
  x = df_flr['Nilai Tengah'][df_flr.Next == i[0]].values
  flrgnt.append([x])
list7_series = pd.DataFrame(flrgnt, columns=['NTFLRG'])
df_flrgnt = pd.concat([next2, list7_series], axis=1)
pd.set_option('max_colwidth',None)
display(df_flrgnt)

def WFTS(data, c):
  global listll
  listll = []
  matrik = []
  df = Matrix(df_flrgnt.NTFLRG,c)
  for i in data:
    x = 0
    y = 0
    for j in range(len(i[0])):
      x += (pow(c,j)*i[0][j])
      y += pow(c,j)
      z = x/y
    listll.append(z)
  for k in range(len(df)):
    hasil = 0
    for l in df[k]:
      hasil += listll[k] * l
    matrik.append(hasil)
    list11 = pd.DataFrame(matrik, columns=['Peramalan'])
    wfts = pd.concat([next2,list11], axis=1)
  return wfts

def Matrix(data,c):
  x = []
  y = []
  for i in data:
    bawah = 0
    for j in range(len(i)):
      bawah += pow(c,j)
    for k in range(len(i)):
      atas = pow(c,k) / bawah
      x.append(atas)
    z = x.copy()
    y.append(z)
    x.clear()
  return y

def Peramalan_Asli(data1,data2):
  global Peramalan_A
  Peramalan_A = [np.NaN,np.NaN]
  for i in range(len(data1)-3):
    list1 = data1[i+2]+data2[i]
    Peramalan_A.append(list1)
  Peramalanasli = pd.DataFrame(Peramalan_A, columns=['Peramalan Asli'])
  #df = pd.DataFrame(list(zip(data1, Peramalan_A)), columns=['name of issuer', 'cusip'])
  return Peramalanasli

def Peramalan(data1,c):
  global df2
  df1 = WFTS(flrgnt,c)
  df2 = [np.NaN,np.NaN]
  for i in data1:
    for j in range(len(df1)):
      if i == df1.Next[j]:
        df2.append(df1.Peramalan[j])
  df3 = pd.DataFrame(df2, columns=['Hasil Peramalan'])
  return df3

def mape(data1,data2):
  global mape_ygy
  mape_ygy = []
  for i in range(len(data1)):
    mape_ygy.append(abs((data1[i]-data2[i])/data1[i]))
  nilai = sum(mape_ygy)/len(mape_ygy)
  return nilai*100

def Rmse(x,y):
    x, y = np.array(x), np.array(y)
    MSE = np.square(np.subtract(x,y)).mean() 
    return math.sqrt(MSE)
  
def Peramalan_testing(data,c):
  list_test = []
  wfts = WFTS(flrgnt,c)
  for i in data.NextStage.dropna():
    for j in range(len(wfts.Next)):
      if i == wfts.Next[j]:
        list_test.append(wfts.Peramalan[j])

  df = pd.DataFrame(list_test, columns=['Peramalan'])
  df = pd.concat([NS_test.dropna().reset_index(drop=True),df], axis=1)
  return df

def Peramalan_test(data1,data2):
  global Peramalan_A
  Peramalan_A = []
  for i in range(len(data1)-2):
    list1 = data1[i+1]+data2[i]
    Peramalan_A.append(list1)
  Peramalanasli = pd.DataFrame(Peramalan_A, columns=['Peramalan Asli'])
  df = pd.concat([Peramal_test,Peramalanasli],axis=1)
  #df = pd.DataFrame(list(zip(data1, Peramalan_A)), columns=['name of issuer', 'cusip'])
  return df

#Mencari nilai C
o = int(input('masukan berapa banyak nilai C :'))
c = [k/100 for k in range(101,(o*100)+1)]
list_RMSE = []
list_MAPE = []
Fuzi_test = Fuzifikasi(x_test)
b = pd.DataFrame(nextstage(Fuzi_test['Fuzifikasi']), columns=['Next'])
nt_test = pd.DataFrame(NT(Fuzi_test['Nilai Tengah']), columns=['Nilai Tengah'])
next = pd.DataFrame(next, columns=['NextStage'])
NS_test = pd.concat([Fuzi_test['bitcoin'], Fuzi_test['Fuzifikasi'], b, nt_test, next], axis=1)

for i in range(len(c)):
  Peramal_test = Peramalan_testing(NS_test,c[i])
  zz2 = Peramalan_test(x_test_asli,Peramal_test['Peramalan'].dropna().reset_index(drop=True))

  list_RMSE.append(Rmse(x_test_asli[2:].reset_index(drop=True),
                        zz2['Peramalan Asli']))
  list_MAPE.append(mape(x_test_asli[2:].reset_index(drop=True),
                        zz2['Peramalan Asli']))

list_RMSE_df = pd.DataFrame(list_RMSE, columns=['RMSE'])
list_MAPE_df = pd.DataFrame(list_MAPE, columns=['MAPE'])


#print(list_RMSE_df.min())
#for i in range (len(list_RMSE)):
  #if list_RMSE_df.min()[0] == list_RMSE[i]:
    #print("Data ke", i+1)
    #print("Dengan optimasi nilai RMSE diperoleh c: ", c[i])

#print('===============================================================')
#plt.scatter(c,list_RMSE_df)
#list_RMSE_df

print(list_MAPE_df.min())
for i in range (len(list_MAPE)):
  if list_MAPE_df.min()[0] == list_MAPE[i]:
    print("Data ke", i+1)
    print("Dengan optimasi nilai MAPE diperoleh c: ", c[i])

print('===============================================================')
plt.scatter(c,list_MAPE_df)
plt.legend()

c = float(input('Masukan nilai C : '))
wfts = WFTS(flrgnt,c)

display(wfts)

zz1 = Peramalan(df_flr.Next,c)
zz2 = Peramalan_Asli(x_train_asli,zz1['Hasil Peramalan'].dropna().reset_index(drop=True))
zz3 = pd.concat([datafuzifikasi[['bitcoin','Fuzifikasi']],zz1,zz2], axis=1)

print('Peramalan Data Training :')
display(zz3)
print('='*100)
print('RMSE Data Training:')
display(Rmse(x_train_asli[3:].reset_index(drop=True),
             zz3['Peramalan Asli'][2:].reset_index(drop=True)))
print('='*100)
print('MAPE Data Training:')
display(mape(x_train_asli[3:].reset_index(drop=True),
             zz3['Peramalan Asli'][2:].reset_index(drop=True)))
print('='*100)

mm = pd.concat([x_train_asli[3:].reset_index(drop=True),zz3['Peramalan Asli'].dropna().reset_index(drop=True)],axis=1)
mm.plot()

iterasi = int(input("Berapa hari Peramalan (>= 1 hari) : "))
for iterasi_ke in range(0,iterasi):
  if iterasi_ke == 0:
    data_test = x_test
    data_test_asli = x_test_asli
  else:
    data_test = data_test.bitcoin
    data_test_asli = data_test_asli.bitcoin

  #Fuzifikasi Data Testing
  Fuzi_test = Fuzifikasi(data_test)

  #Next Stage Data Testing
  b = pd.DataFrame(nextstage(Fuzi_test['Fuzifikasi']), columns=['Next'])
  nt_test = pd.DataFrame(NT(Fuzi_test['Nilai Tengah']), columns=['Nilai Tengah'])
  next = pd.DataFrame(next, columns=['NextStage'])
  NS_test = pd.concat([Fuzi_test['bitcoin'], Fuzi_test['Fuzifikasi'], b, nt_test, next], axis=1)

  #Peramalan Data Testing
  Peramal_test = Peramalan_testing(NS_test,c)

  #Peramalan Asli Data Testing
  PA = Peramalan_test(data_test_asli,Peramal_test.Peramalan)

  data1 = data_test_asli.copy().to_list()
  data1.append(PA['Peramalan Asli'].iloc[-1])
  data_test_asli = pd.DataFrame(data1, columns=['bitcoin'])
  data2 = data_test.copy().to_list()
  data2.append(PA['Peramalan'].iloc[-1])
  data_test = pd.DataFrame(data2, columns=['bitcoin'])

#Menampilkan Fuzifikasi Data Testing
print('='*100)
print('Fuzifikasi Data Testing')
print('='*100)
display(Fuzi_test[['bitcoin','Fuzifikasi']])
print()

#Meampilkan Next Stage Data Testing
print('='*100)
print('Next Stage Data Testing')
print('='*100)
display(NS_test[['bitcoin','Fuzifikasi','Next']])
print()

#Menampilkan Peramalan Data Testing
print('='*100)
print('Peramalan Data Testing')
print('='*100)
display(Peramal_test[['bitcoin','Fuzifikasi','Next','Peramalan']])
print()

#Menampilkan Peramalan Asli Data Testing
print('='*100)
print('Peramalan Asli Data Testing')
print('='*100)
display(PA[['bitcoin','Fuzifikasi','Next','Peramalan','Peramalan Asli']])
print()

#Menampilkan Mape dan RMSE
print('='*100)
print('RMSE : ')
print(Rmse(data_test_asli[2:].reset_index(drop=True),
           PA['Peramalan Asli']))
print('='*100)
print('MAPE :')
MAPE = mape(data_test_asli['bitcoin'][2:-1].reset_index(drop=True),PA['Peramalan Asli'])
print(MAPE)#f'{round(MAPE,3)}%')
print('='*100)
print()

plot = pd.concat([data_test_asli['bitcoin'][2:-1].reset_index(drop=True),PA['Peramalan Asli']], axis=1)
plot.plot()

plot = pd.concat([data_test_asli[2:-1].reset_index(drop=True),PA['Peramalan Asli']], axis=1)
plt.plot(plot)
plt.ylim(70000000)